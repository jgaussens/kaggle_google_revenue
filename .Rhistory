wd = "C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Dev/kaggle_google_revenue"
setwd(wd)
rm(wd)
wd = "C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Dev/kaggle_google_revenue"
setwd(wd)
rm(wd)
train<-read.csv("../data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
test<-read.csv("../data/test.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("../Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
test<-read.csv("../Data/test.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
wd = "C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Dev/kaggle_google_revenue"
setwd(wd)
get(wd)
rm(wd)
getwd()
train<-read.csv("Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("/../Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("../Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("./../Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
wd = "C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Dev/kaggle_google_revenue"
setwd(wd)
train<-read.csv("../Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("..\Data\train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("../../train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("..\\Data\\train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
test<-read.csv("./Data/test.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("./Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet
train<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
test<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/test.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
test<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/test.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train$datasplit<-"train" ; test$datasplit<-"test"
train$campaignCode<-NULL ; test$campaignCode<-NULL
json<-c("trafficSource","totals","geoNetwork","device")
require(jsonlite)
require(data.table)
require(lubridate)
require(questionr) #Pour un accÃ¨s visuel facile des proportions par variable
install.packages("questionr")
require(questionr) #Pour un accÃ¨s visuel facile des proportions par variable
require(dummies)
require(dplyr)
dplyr
require(dplyr)
require(ggplot2)
# crÃ©ation d'une colonne indicatrice train test avant assemblage des deux tables ####
train$datasplit<-"train" ; test$datasplit<-"test"
# suppression d'une colonne visiblement inutile
train$campaignCode<-NULL ; test$campaignCode<-NULL
# identification des 4 colonnes au format json
json<-c("trafficSource","totals","geoNetwork","device")
tables<-c("train","test")
glob<-data.table() #table vide qui va rÃ©cupÃ©rer les tableas transformÃ©es
# lecture et transformation successive train et test (suppression au passage de colonnes inutiles)
for (t in tables) {
partiel<-get(t)[,setdiff(names(get(t)),json)] # colonnes non json
for (j in json) partiel<-cbind(partiel,fromJSON(paste("[", paste(get(t)[[j]], collapse = ","), "]")))
temp<-partiel$adwordsClickInfo
partiel$adwordsClickInfo<-NULL
temp$targetingCriteria<-NULL
result<-as.data.table(cbind(partiel,temp))
if(t=="train") result$campaignCode<-NULL else result$transactionRevenue<-NA
glob<-rbind(glob,result)
}
rm(partiel, train, test) ; gc()
require(jsonlite)
train$datasplit<-"train" ; test$datasplit<-"test"
train$campaignCode<-NULL ; test$campaignCode<-NULL
train<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/train.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
test<-read.csv("C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Data/test.csv",stringsAsFactors = FALSE,colClasses=c("character","integer","character","character","character","character","character","character","character","integer","integer","integer")) ;
train$datasplit<-"train" ; test$datasplit<-"test"
train$campaignCode<-NULL ; test$campaignCode<-NULL
json<-c("trafficSource","totals","geoNetwork","device")
tables<-c("train","test")
glob<-data.table() #table vide qui va rÃ©cupÃ©rer les tableas transformÃ©es
require(data.table)
wd = "C:/Users/arthu/OneDrive - De Vinci/ESILV/A5/Apprentissage/Kaggle_projet/Dev/kaggle_google_revenue"
setwd(wd)
rm(wd)
require(jsonlite)
require(data.table)
require(lubridate)
require(questionr) #Pour un accÃ¨s visuel facile des proportions par variable
require(dummies)
require(dplyr)
require(ggplot2)
train$datasplit<-"train" ; test$datasplit<-"test"
train$campaignCode<-NULL ; test$campaignCode<-NULL
json<-c("trafficSource","totals","geoNetwork","device")
tables<-c("train","test")
glob<-data.table() #table vide qui va rÃ©cupÃ©rer les tableas transformÃ©es
for (t in tables) {
partiel<-get(t)[,setdiff(names(get(t)),json)] # colonnes non json
for (j in json) partiel<-cbind(partiel,fromJSON(paste("[", paste(get(t)[[j]], collapse = ","), "]")))
temp<-partiel$adwordsClickInfo
partiel$adwordsClickInfo<-NULL
temp$targetingCriteria<-NULL
result<-as.data.table(cbind(partiel,temp))
if(t=="train") result$campaignCode<-NULL else result$transactionRevenue<-NA
glob<-rbind(glob,result)
}
rm(partiel, train, test) ; gc()
str(glob)
summary(glob)
require(DataExplorer)
install.packages("DataExplorer")
require(DataExplorer)
plot_missing(glob)
glob = glob[, !c("adContent", "page", "slot", "adNetworkType", "isVideoAd", "gclId")]
sapply(glob, function(x) length(unique(x)))
todrop <- names(glob)[which(sapply(glob,uniqueN)<2)]
glob[, (todrop) := NULL]
rm(todrop)
plot_missing(glob) #Recheck des parts des missings
glob$date = ymd(glob$date)
glob$transactionRevenue = as.numeric(glob$transactionRevenue)
numVars <- c("hits", "bounces", "pageviews", "newVisits")
glob[, numVars] <- lapply(glob[, ..numVars], as.integer)
rm(numVars)
tmp = glob[, .N, by="sessionId"]
tmp
nrow(glob) - nrow(tmp)
tmp[, .N, by="N"]
glob$transactionRevenue[is.na(glob$transactionRevenue)] <- 0
glob$dollarLogTransactionRevenue = glob$transactionRevenue / 1000000 #Pour plot plus concrets
tmp = glob[, sum(transactionRevenue), by="fullVisitorId"]
colnames(tmp) = c("fullVisitorId", "sumTransactionRevenue")
glob = merge(glob, tmp, by="fullVisitorId", all.x = TRUE)
glob$logTransactionRevenue = log1p(glob$transactionRevenue)
glob$logSumTransactionRevenue = log1p(glob$sumTransactionRevenue)
View(glob)
View(glob)
getwd()
